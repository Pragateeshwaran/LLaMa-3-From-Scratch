Certainly! Here are the answers for each of the 25 questions based on the given problem statement using MongoDB CRUD operations.

### Step 1: Create a Collection and Insert Documents
1. **Create a collection named ‘RestaurantFoods’ and insert documents based on the example schema.**

```javascript
use school;

db.createCollection("RestaurantFoods");

db.RestaurantFoods.insertOne({
  name: "Chicken Burrito",
  category: "Mexican",
  price: 300,
  available: true,
  ingredients: { main: "Chicken", additional: ["Rice", "Beans", "Salsa"] }
});
```

2. **Insert Multiple food items with 10 different documents.**

```javascript
db.RestaurantFoods.insertMany([
  { name: "Caesar Salad", category: "Salad", price: 150, available: true, ingredients: { main: "Lettuce", additional: ["Croutons", "Parmesan", "Caesar Dressing"] }},
  { name: "Margherita Pizza", category: "Pizza", price: 400, available: true, ingredients: { main: "Tomato", additional: ["Mozzarella", "Basil"] }},
  { name: "Pasta Alfredo", category: "Pasta", price: 350, available: true, ingredients: { main: "Pasta", additional: ["Cream", "Parmesan", "Chicken"] }},
  { name: "Chocolate Cake", category: "Dessert", price: 250, available: true, ingredients: { main: "Chocolate", additional: ["Flour", "Sugar", "Eggs"] }},
  { name: "Tuna Sandwich", category: "Sandwich", price: 180, available: true, ingredients: { main: "Tuna", additional: ["Bread", "Lettuce", "Mayo"] }},
  { name: "Lemonade", category: "Beverage", price: 50, available: true, ingredients: { main: "Lemon", additional: ["Water", "Sugar"] }},
  { name: "Grilled Chicken", category: "Main Course", price: 500, available: true, ingredients: { main: "Chicken", additional: ["Spices", "Olive Oil"] }},
  { name: "Greek Salad", category: "Salad", price: 200, available: true, ingredients: { main: "Cucumber", additional: ["Feta", "Olives", "Tomato"] }},
  { name: "BBQ Ribs", category: "Main Course", price: 700, available: true, ingredients: { main: "Pork", additional: ["BBQ Sauce", "Spices"] }},
  { name: "Espresso", category: "Beverage", price: 100, available: true, ingredients: { main: "Coffee", additional: ["Water"] }}
]);
```

### Step 2: Update Documents
3. **Update all the food items in the category “salad” to “healthy greens”.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Salad" },
  { $set: { category: "Healthy Greens" } }
);
```

4. **Increase the price of pizza by Rs. 200.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pizza" },
  { $inc: { price: 200 } }
);
```

5. **Add “Basil” as an additional ingredient to all food items in the “Pasta” Category.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pasta" },
  { $addToSet: { "ingredients.additional": "Basil" } }
);
```

6. **Add a new field “Calories” with value to all the “Dessert” items.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Dessert" },
  { $set: { "ingredients.Calories": 350 } }
);
```

7. **Update all the food items priced above Rs.200 as “unavailable”.**

```javascript
db.RestaurantFoods.updateMany(
  { price: { $gt: 200 } },
  { $set: { available: false } }
);
```

8. **Increase the price of all food items under “Beverage” category by Rs. 5.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Beverage" },
  { $inc: { price: 5 } }
);
```

9. **Remove “olives” from the additional ingredients of all “Pizza” category.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pizza" },
  { $pull: { "ingredients.additional": "Olives" } }
);
```

### Step 3: Query Documents
10. **Check the price of all food items below Rs. 300.**

```javascript
db.RestaurantFoods.find(
  { price: { $lt: 300 } },
  { name: 1, price: 1, _id: 0 }
).pretty();
```

### Step 4: Further Updates
11. **Increase the price of all food items by Rs. 50 if their current price is less than 20 except “Beverages” category.**

```javascript
db.RestaurantFoods.updateMany(
  { price: { $lt: 20 }, category: { $ne: "Beverage" } },
  { $inc: { price: 50 } }
);
```

12. **Add “Mushrooms” and “Bell Peppers” to the additional ingredients array at position 2 of all “Pizza” items.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pizza" },
  { $push: { "ingredients.additional": { $each: ["Mushrooms", "Bell Peppers"], $position: 2 } } }
);
```

13. **Remove the last ingredient from the additional ingredient array of all food items.**

```javascript
db.RestaurantFoods.updateMany(
  {},
  { $pop: { "ingredients.additional": 1 } }
);
```

14. **Change the category of all food items to “Signature Dishes” if it priced above Rs. 750.**

```javascript
db.RestaurantFoods.updateMany(
  { price: { $gt: 750 } },
  { $set: { category: "Signature Dishes" } }
);
```

15. **Add “Spicy” levels in the “ingredients” as low, medium, high for all the food items.**

```javascript
db.RestaurantFoods.updateMany(
  {},
  { $set: { "ingredients.Spicy": "medium" } }
);
```

16. **Change the “Spicy” as “Medium” for all the food items of “Pizza” Category.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pizza" },
  { $set: { "ingredients.Spicy": "Medium" } }
);
```

17. **Increase the price of all food items by Rs. 75 if they contain “chicken” as main ingredient or in “Pizza” category.**

```javascript
db.RestaurantFoods.updateMany(
  { $or: [ { "ingredients.main": "Chicken" }, { category: "Pizza" } ] },
  { $inc: { price: 75 } }
);
```

18. **Remove all food items that are priced below Rs. 50.**

```javascript
db.RestaurantFoods.deleteMany(
  { price: { $lt: 50 } }
);
```

19. **Add "Oregano" and "Chili Flakes" at the end of the ingredients array for all food items with category: Pizza.**

```javascript
db.RestaurantFoods.updateMany(
  { category: "Pizza" },
  { $push: { "ingredients.additional": { $each: ["Oregano", "Chili Flakes"] } } }
);
```

20. **Remove first ingredient from the additional ingredient array of all food items that contains “Bread” as main ingredient.**

```javascript
db.RestaurantFoods.updateMany(
  { "ingredients.main": "Bread" },
  { $pop: { "ingredients.additional": -1 } }
);
```

### Step 5: Read and Count Documents
21. **Display all the food items sorted by price in ascending order.**

```javascript
db.RestaurantFoods.find().sort({ price: 1 }).pretty();
```

22. **Display the first 5 most expensive food items.**

```javascript
db.RestaurantFoods.find().sort({ price: -1 }).limit(5).pretty();
```

23. **Display all the food items except the first two items.**

```javascript
db.RestaurantFoods.find().skip(2).pretty();
```

24. **Count the number of food items in “Pasta” Category.**

```javascript
db.RestaurantFoods.countDocuments({ category: "Pasta" });
```

### Step 6: Delete Documents
25. **Delete all the food items that are “available: false”.**

```javascript
db.RestaurantFoods.deleteMany(
  { available: false }
);
```

### Result
The essential database CRUD operations of MongoDB were successfully executed and output was verified.